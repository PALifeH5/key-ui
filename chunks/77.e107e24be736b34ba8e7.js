webpackJsonp([77],{624:function(s,n){s.exports="# 组件库的主题\n\n## 更好的 CSS 编写体验\n\nKeyUI 在设计之初就考虑到了组件库的换肤的问题，因此在框架搭建过程中就用了很多工具，把 CSS 变得更自动化、更富有编程性，例如：\n\n- [CSS Modules](https://github.com/css-modules/css-modules) CSS 模块化\n- [precss](https://github.com/jonathantneal/precss) 可以使用类似 SASS 的语法编写 CSS\n- [autoprefixer](https://github.com/postcss/autoprefixer) 自动处理 CSS 兼容性问题\n- [postcss-modules-values-replace](https://github.com/princed/postcss-modules-values-replace) CSS 模块变量\n- [postcss-calc](https://github.com/postcss/postcss-calc) 样式值计算\n- [postcss-color-function](https://github.com/postcss/postcss-color-function) 颜色计算\n\n## 组件库的公共变量\n\n包括一些字体大小、行高、字体颜色、UI 颜色库、border 等常用 CSS 样式，KeyUI 组件使用到的地方都会从公共变量引用。如果主题需要更改这些基础变量，只需要修改变量值，就能更新所有组件。\n\n## 组件的自有变量\n\n类似公共变量，组件自身 CSS 用到的样式也会抽出为变量（特别是涉及到像素值、颜色、动画时间等）。这部分变量会比较多。\n\n## 更换组件库的主题\n\n把组件库的公共变量和组件的自有变量都放置到一个主题文件中管理。如果需要更换主题，我们需要维护多个主题文件。在 release 的时候指定主题文件就能发布出我们要的组件库。\n\n"}});