webpackJsonp([69],{605:function(n,e){n.exports="# 渲染函数\n\n部分组件提供了渲染函数为作为组件的 prop，开发者按照规范返回 React 节点就能完成组件的定制。\n\n比如 [ActionSheet](#/api/action-sheet) 的 `renderSheet` 函数，通过这个渲染函数我们能把 ActionSheet 的动作列表定制成横排样式。\n\n```html\n<ActionSheet\n    show={this.state.as2}\n    data={['选项一', '选项二', '选项三', '选项四', '选项五', '选项六']}\n    onChange={(index, e) => this.setState({ as2: false })}\n    onCancel={() => this.setState({ as2: false })}\n    renderSheet={(data, onChange) => (\n        <div className={styles.container}>\n            <div className={styles.title}>\n                本网页由 guanjia.pingan.com 提供\n            </div>\n            {data.map((e, i) => (\n                <div\n                    key={e}\n                    onTouchTap={(event) => {\n                        if (onChange) onChange(i, event)\n                    }}\n                    className={styles.option}\n                >\n                    <Icon type=\"camera\" className={styles.icon} />\n                    {e}\n                </div>\n            ))}\n        </div>\n    )}\n    cancelLabel=\"Cancel\"\n/>\n```\n\n渲染函数还包括：\n\n- [ActionSheet](#/api/action-sheet) 的 `renderSheet`\n- [FileSelector](#/api/file-selector) 的 `renderInput`\n- [Select](#/api/select) 的 `renderInline`\n- [DatePicker](#/api/date-picker) 的 `renderInline`\n- [InputItem](#/api/input-item) 的 `magnifyingFunc`\n"}});