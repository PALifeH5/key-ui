webpackJsonp([96],{632:function(n,e){n.exports="# 组件 API\n\n组件的 API 包括组件的 props、getter、可调用方法、预设值等等。\n\n## props\n\nJS 组件都会有 props，CSS 组件没有。以下是 props 的类型列表。\n\n### ReactNode\n\nReact 节点，可能有以下几种取值：\n\n- `null`: 空节点\n- String: 字符串\n- Number: 数字\n- React Component: React 组件，比如 `<div>`，或者自定义组件 `<SomeComponent>`\n- React Fragment: ReactNode 组成的数组\n\n### IconNode\n\n自定义类型，在 props 为图标时常用，取值和 ReactNode 一样。\n\n区别点在于当值为字符串时，会把该值作为 `<img>` 标签的 `src` 属性（即新建一个 `img`）。\n\n### Boolean\n\n布尔值，`true` 或者 `false`\n\n### Number\n\n数字\n\n### String\n\n字符串\n\n### Function\n\n函数，一般表示为 `参数类型 => 返回类型` 的形式，如果不要求返回类型则为 `参数类型 => {}`。\n\n例如，ActionSheet 的 `onChange` 函数定义为 `(Number, Event) => {}`，表明其在回调的时候第一个参数是 Number (index), 第二个参数是 Event (e)，开发者可以拿到参数后作对应处理。\n\n### Array\n\n数组，但一般会定义数组元素的结构。比如数字数组记为 `[ Number ]`。\n\n### Object\n\n对象（字典），同数组一般会定义对象的结构。比如对象里面包含 `name` 和 `gender` 两个键，可记为 `{ name: String, gender: String }`\n\n假如结构是数组里面包含 Object，同样可以简写，形式如同 `[{ name: String, gender: String }]`。\n\n### objectKeyProp\n\n可以用作字典 key 的属性，包含三种：\n\n- Number\n- String\n- Boolean\n\n### Event\n\n点击事件等\n\n## Getter\n\nGetter 是组件的取值函数，一般对组件建立了 ref 后可以访问到（注意，纯函数组件无法建立 ref）。例如 InputItem 组件有 value 的 getter，可以按如下方式访问：\n\n```js\nclass Demo extends Component {\n    componentDidMount() {\n        console.log(this.mInput.value) // 'hello'\n    }\n\n    render() {\n        return (\n            <InputItem defaultValue=\"hello\" ref={elem => this.mInput = elem} />\n        )\n    }\n}\n```\n\n## 预设值\n\n预设值为组件的静态变量。例如 DatePicker 组件，其预设了未选择和超过范围两种静态变量。\n\n```js\nimport { DatePicker } from 'key-ui/date-picker'\n\nDatePicker.NOT_SELECTED // 未选择\nDatePicker.OUT_OF_RANGE // 超过范围\n```\n## 受控组件和非受控组件\n\n参考 [React 的受控和非受控概念](https://reactjs.org/docs/uncontrolled-components.html)。\n\n`value` 代表受控组件，开发者需自己维护状态值，需要在 `onChange` 回调接收更新。\n\n`defaultValue` 代表非受控组件，开发者无需维护状态值，可以通过建立 ref 和 getter 来获取组件的值。\n\n如果一个组件既有 `value` 和 `defaultValue`，表明其是同时支持两种状态的。\n\n"}});