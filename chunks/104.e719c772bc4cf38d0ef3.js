webpackJsonp([104],{623:function(e,n){e.exports="# date-picker.js\n\n`{ InlineDatePicker, DatePicker }`\n\n## InlineDatePicker\n\n内联日期选择器。\n\n### API\n\n| props | 说明 | 类型 | 默认值 | 必需 | \n|:--|:--|:--|:--|:--|\n| value | 值（受控） | dateProp | | |\n| defaultValue | 默认值 | dateProp | | |\n| min | 最小值 | dateProp | | |\n| max | 最大值 | dateProp | | |\n| type | 日期类型 | 'date', 'datetime', 'month', 'time' | 'date' | |\n| locale | 地区 | localeProp | zhCNLocale | |\n| use24Hours | 使用24小时 | Boolean | false | |\n| onChange | 变更回调 | Date => {} | | |\n\n#### `dateProp`\n\n`dateProp` 是用作 `Date(dateProp)` 构造函数的，可以是以下几种类型：\n\n- Date 对象\n- `null` 或者 `undefined`，等同于没有参数\n- String，但 String 必须是能合法 `Date()` 生成 Date 对象的。比如 [RFC2822 Section 3.3](http://tools.ietf.org/html/rfc2822#section-3.3) 或者 [ISO-8601](https://www.w3.org/TR/NOTE-datetime) 格式的。\n\n**虽然 `min`, `max`, `value` 这些都为 `dateProp`，支持不同类型，但是建议使用的时候最好保持一种格式（比如都用 ISO String，或者都用 Date 对象），以免出现边界判定的问题。**\n\n如果 `type !== 'time'`，那么 `min` 默认值为往前五十年，`max` 默认值为往后五十年。\n\n### `localeProp`\n\n地区定义，其为一个 Object，包含以下内容（以下 `du` 为 `key-utils/date.js`）：\n\n- `order`: `du.YEAR`, `du.MONTH`, `du.DATE`, `du.PERIOD`, `du.HOUR`, `du.MINUTE`, `du.SECOND`, `du.MILLISECOND` 等值的排序\n- `yearLabel`: 年份文本函数，year => ReactNode\n- `monthLabel`: 月份（0-11）文本函数，month => ReactNode\n- `dateLabel`: 日文本函数，date => ReactNode\n- `periodLabel`: 上午下午文本函数，period => ReactNode\n- `hourLabel`: 小时文本函数，hour => ReactNode\n- `minuteLabel`: 分钟文本函数，minute => ReactNode\n- `secondLabel`: 秒文本函数，second => ReactNode\n- `millisecondLabel`: 毫秒文本函数，milisecond => ReactNode\n\n比如自定义一个英文的 locale：\n\n```js\nimport leftPad from 'key-utils/left-pad'\n\nconst locale = {\n    order: ['month', 'date', 'year', 'hour', 'minute', 'second', 'period'],\n    yearLabel: value => value,\n    monthLabel: value => ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul',\n        'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][value],\n    dateLabel: value => leftPad(value, 2, '0'),\n    periodLabel: value => (value === 'am' ? 'AM' : 'PM'),\n    hourLabel: value => leftPad(value, 2, '0'),\n    minuteLabel: value => leftPad(value, 2, '0'),\n    secondLabel: value => leftPad(value, 2, '0'),\n    millisecondLabel: value => leftPad(value, 3, '0'),\n}\n\nexport default locale\n```\n\n### Getter\n\n- `value`: 获取当前日期值\n\n## DatePicker\n\n基于 InlineDatePicker 的弹出日期选择器。\n\n### API\n\n| props | 说明 | 类型 | 默认值 | 必需 | \n|:--|:--|:--|:--|:--|\n| value | 值（受控） | dateProp | | |\n| defaultValue | 默认值 | dateProp | | |\n| min | 最小值 | dateProp | | |\n| max | 最大值 | dateProp | | |\n| type | 日期类型 | 'date', 'datetime', 'month', 'time' | 'date' | |\n| locale | 地区 | localeProp | zhCNLocale | |\n| use24Hours | 使用24小时 | Boolean | false | |\n| title | 弹出标题 | ReactNode | | |\n| confirmButton | 弹出确定按钮 | ReactNode | '确定' | |\n| cancelButton | 弹出取消按钮 | ReactNode | '取消' | |\n| renderInline | 渲染内联部分 | (dateValue, String) => ReactNode | du.format | |\n| disabled | 是否禁用 | Boolean | false | |\n| defaultOpen | 默认弹出 | Boolean | false | |\n| onChange | 变更回调 | dateValue => {} | | |\n| onCancel | 取消回调 | Date => {} | | |\n\n### `dateValue`\n\n`dateValue` 为日期选择器的值，可能有以下三种，在 `renderInline` 和 `onChange` 时要注意区分一下：\n\n- `DatePicker.NOT_SELECTED`: String, 表示用户未选择过值，在 `defaultValue` 或者 `value` 传递 `null`/`undefined` 会使用这个值\n- `DatePicker.OUT_OF_RANG`: String, 表示给定的值超过 min, max 范围\n- Date: 有效的日期对象\n\n### Getter\n\n- `value`: 获取当前日期值\n\n"}});