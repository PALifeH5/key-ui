webpackJsonp([77],{597:function(n,t){n.exports='# 组件的 CSS\n\n如果 [组件的 style](#/docs/component-style) 和 前面 [组件的 className](#/docs/component-style) 两种形式都不能满足定制需求，开发者可以为组件的 className 添加样式，或者使用自己的 CSS 文件。\n\n## 为组件的 className 添加样式\n\nKeyUI 组件的 CSS 规范：\n\n- 所有组件通过 CSS 类名给子节点应用样式，不依赖于 DOM 结构；\n- CSS 类名均为 `k-component-name-*` 形式；\n- 组件根节点统一命名为 `k-component-name-root`。\n\n例如，开发者想把 ListItem 的标题长度改为最大5个字符（默认4个换行），可以通过以下形式：\n\n**JS**\n\n```html\n<div className={styles.container}>\n    <List>\n        <List title="文字标题一" content="文字内容" alignContent="left" />\n        <List title="文字标题二" content="文字内容" alignContent="left" />\n    </List>\n</div>\n```\n\n**CSS**\n\n```css\n.container .k-list-item-container {\n    width: 5.5em;\n}\n```\n\n## 使用自己的 CSS 文件\n\n如 [快速入门](#/docs/get-started) 提到的第三种引用方式，组件库提供了一种形式分离了 JS 和 CSS。开发者可以只引用 JS 文件使用组件功能，CSS 文件使用自己的。\n\n当然，此种形式的弊端也是很明显的：开发者需要清楚地知道组件 CSS 中包含哪些类名，每个类名下需要有什么样式。如果要为整个组件库换肤，这种形式工作量比较大，可以参考另一种方式：[组件库的主题](#/docs/key-ui-theme)。\n\n```js\nimport { List, ListItem } from \'key-ui/lib/list\'\nimport \'my-list-style.css\'\n\nconst MyPage = () => (\n    <List header="列表">\n        <ListItem title="标题一" content="内容" />\n        <ListItem title="标题二" content="内容" />\n    </List>\n)\n\n```\n\n\n\n'}});