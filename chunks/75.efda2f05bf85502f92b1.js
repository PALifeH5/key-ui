webpackJsonp([75],{626:function(n,t){n.exports='# rest 参数处理\n\nReact DOM 中的组件默认有一些 props，包括 `key`, `ref`, `className`, `style` 等；浏览器 DOM 中的标签属性就更多了，比如元素上的事件，比如 `<input>`，type 取不同值时有大量的属性值。这些默认的属性在组件的 propTypes 定义中一一穷举、代码中一一处理是非常冗余的（也没有必要）。\n\n为了让开发者更易于使用 KeyUI 组件，几乎每个 KeyUI 组件（JS 组件）都加了 rest 参数处理：**对于组件 propTypes 中没有定义的 props 参数，我们把它们用 [ES6 对象 rest 展开](https://babeljs.io/docs/plugins/transform-object-rest-spread/) 方式放到一个 rest 参数中，再把 rest 展开到组件根节点（当然，部分组件可能不在根节点）。**\n\n## React DOM props 处理\n\n例如 Button 组件，用户可以用以下形式使用：\n\n```html\n<Button \n    key="myButton" \n    className="myButtonClass"\n    style={{ \n        position: \'fixed\',\n        fontSize: 24,\n    }}\n    onTouchTap={handleTap}\n>\n    按钮文本\n</Button>\n```\n\n除了 `onTouchTap ` 属于 Button 的 propTypes 定义，其余都不在定义中。rest 参数处理会把 `key`, `className`, `style` 都应用在 Button 的根节点上。\n\n如果应用 rest 参数的节点已有相同的参数，就要做一次合并，比如 `className`，需要把开发者传递的类名和组件本身的类名进行拼接；如果不能合并，大部分情况下优先用组件的参数（部分会优先用开发者提供的）。\n\n最直观的好处是我们在使用组件时，能够像内置的组件 `<div>` 等一样直接指定 `className` 和 `style`，快速给组件定制样式。\n\n## 浏览器 DOM props 处理\n\n例如 InputItem 组件，除了组件定义的 propTypes 之外，用户可能还会传递很多属性给 `<input>` 标签。\n\n```html\n<InputItem\n    title="标题"\n    defaultValue={myPhoneNumber}\n    placeholder="请输入手机号"\n    maxLength="11"\n    type="tel"\n/>\n```\n\n除了 `title` 和 `defaultValue` 是 propTypes 定义的外，其余属性都会应用到子节点 `<input>` 上。\n\n\n'}});