webpackJsonp([101],{627:function(n,o){n.exports="# feedbackCenter.js\n\n`{ feedbackCenter }`\n\n## feedbackCenter\n\nfeedbackCenter 不是组件，它封装 Feedback 类组件（[Toast](#/api/toast) 和 [Modal](#/api/modal)）为一些函数，更易于调用，不需要在每个使用地方去写 JSX 和控制显示隐藏。feedbackCenter 自己有 DOM 挂载和状态管理。\n\n### Function\n\n#### `alert(options)`\n\n渲染一个 Alert。\n\n`options` 可以是 String 或者 Object。如果为 Object，则展开作为 Alert 组件的 props；如果为 String，则封装为 `{ content: options }` 的 Object 再传递给 Alert 组件。\n\n#### `confirm(options)`\n\n渲染一个 Confirm。\n\n`options` 为 Object，展开作为 Confirm 组件的 props。\n\n#### `prompt(options)`\n\n渲染一个 Prompt。\n\n`options` 为 Object，展开作为 Prompt 组件的 props。\n\n#### `modal(options)`\n\n渲染一个 Modal。\n\n`options` 为 Object，展开作为 Modal 组件的 props。\n\n#### `hasModal() => Boolean`\n\n检测当前是否有弹框（包括 Alert, Confirm, Prompt, Modal）。\n\n#### `clearLastModal() => Boolean`\n\n清除最上面一层的弹框（包括 Alert, Confirm, Prompt, Modal），如果有清除弹框则返回 `true`，否则 `false`。\n\n#### `toast(options)`\n\n渲染一个 Toast。\n\n`options` 可以是 String 或者 Object。如果为 Object，则展开作为 Toast 组件的 props；如果为 String，则封装为 `{ content: options }` 的 Object 再传递给 Toast 组件。\n\n\n"}});